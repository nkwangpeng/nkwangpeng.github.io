<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangPeng&#39;s Blog</title>
  
  <subtitle>记录生活学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cherryls0424.com/"/>
  <updated>2020-04-16T10:10:26.982Z</updated>
  <id>https://cherryls0424.com/</id>
  
  <author>
    <name>Wang Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>稳定婚配 Gale-Shapley 算法</title>
    <link href="https://cherryls0424.com/2020/04/16/Shapley/"/>
    <id>https://cherryls0424.com/2020/04/16/Shapley/</id>
    <published>2020-04-16T07:11:37.000Z</published>
    <updated>2020-04-16T10:10:26.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&#8195; &#8195; 有 n 个男人和 n 个女人，其中每个男人心里对每个女人有一个优先排序，同样每个女人心里对每个男人也有一个优先排序。现在需要写出一个算法安排这 N 个男的、N 个女的约会，要求两个人的约会应该是稳定的。那么何为稳定呢？<br>&#8195; &#8195; 比如有两对约会对象 M1 F2，M2 F1。M1 心目中更喜欢 F1，但是他和 F2 约会了，M2 心目中更喜欢 F2，但是却让他和 F1 约会了，显然这样的配对是不稳定的，随时都可能发生 M1 和 F1 私奔或者 M2 和 F2 私奔的情况。所以在做出匹配选择的时候，我们需要做出稳定的选择，以防这种情况的发生。</p><h1 id="输入输出示例"><a href="#输入输出示例" class="headerlink" title="输入输出示例"></a>输入输出示例</h1><p>第一行数据表示 Man (Woman) 的数目 n；接下来的数据中，第一个 n^2 的数据块表示 Man 的优先列表 (即每个男人心里对每个女人的优先排序)；另一个 n^2 的数据块表示 Woman 的优先列表 (即每个女人心里对每个男人的优先排序)<br>Input：<br>5          ————&gt;(Man (Woman) 的数目 n)<br>2 1 4 5 3  ————-&gt;(第一个男人的优先列表)<br>4 2 1 3 5<br>2 5 3 4 1  ————-&gt;(第三个男人的优先列表)<br>1 4 3 2 5<br>2 4 1 5 3<br>5 1 2 4 3  ————–&gt;(第一个女人的优先列表)<br>3 2 4 1 5<br>2 3 4 5 1<br>1 5 4 3 2<br>4 2 5 3 1<br>Output：<br>1 3 2 5 4  ————–&gt;(依次表示男人 1 到 n 的匹配对象)</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>每次约会的邀请由男人发起</p><ol><li>在第一轮配对中，每个男生向自己最喜欢的女生发起邀请 (即每个男人各自排序的第一位女士)，那么会出现两种情况<br>(1) 该女士没有与其他男生匹配，则该女士接受该男生<br>(2) 该女士已有配对男士，则将此配对男士与该男生比较，女士选择她更喜欢的那个</li><li>第一轮配对结束，有些男生有了配偶，有些仍然单身<br>此时进行第二轮循环，每个仍旧单身的男生向没拒绝过他的最喜欢的女生发起邀请 (比如在第一轮中他最喜欢的女生更加喜欢别的男生，那么此时女士便对这位男生是拒绝的，因此这时他应向第二喜欢的女士发起邀请)，依旧会分上述两种情况，解决方案也相同</li><li>重复该过程，直到所有人都不是单身</li></ol><h1 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRank</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> x)</span> <span class="comment">// 找到 x 在数组中的位置 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a [i] == x) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">// 没找到返回 - 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetGirl</span><span class="params">(<span class="keyword">int</span> *a)</span>  <span class="comment">// 男生向女生发起邀请 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a [i] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> thegirl = a [i];  <span class="comment">// 如果女士没有拒绝过该男生则配对 </span></span><br><span class="line">a [i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> thegirl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gale_Shapley</span><span class="params">(<span class="keyword">int</span> *out, <span class="keyword">int</span> **ManArray, <span class="keyword">int</span> **WomanArray)</span>  <span class="comment">// 稳定匹配算法 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (out [i] == <span class="number">-1</span>) <span class="comment">// 如果仍然存在单身男士，则继续进行配对操作 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> thegirl = GetGirl (ManArray [i]);<span class="comment">// 男士向女士发起邀请 </span></span><br><span class="line"><span class="keyword">int</span> isdated = GetRank (out, thegirl);<span class="comment">// 判断该女士是否有约 </span></span><br><span class="line"><span class="keyword">if</span> (isdated &lt; <span class="number">0</span>) <span class="comment">// 无约 </span></span><br><span class="line">&#123;</span><br><span class="line">out [i] = thegirl;  <span class="comment">// 男生和该女士配对 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">// 如果该女士有约，则女士在两个男生之间进行选择 </span></span><br><span class="line"><span class="keyword">int</span> formerMan = GetRank (out, thegirl);  <span class="comment">// 找到女士的现配偶 </span></span><br><span class="line"><span class="keyword">int</span> formerRank = GetRank (WomanArray [thegirl - <span class="number">1</span>], formerMan + <span class="number">1</span>); <span class="comment">// 女士现配偶在女士心目中的排序 </span></span><br><span class="line"><span class="keyword">int</span> laterRank = GetRank (WomanArray [thegirl - <span class="number">1</span>], i + <span class="number">1</span>);  <span class="comment">// 男生在女士心目中的排序 </span></span><br><span class="line"><span class="keyword">if</span> (formerRank &lt; laterRank) </span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">-1</span>;<span class="comment">// 如果现配偶排名靠前，男生被拒绝，重新循环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">out [i] = thegirl;   <span class="comment">// 如果男生排名靠前，前任被分手 </span></span><br><span class="line">out [formerMan] = <span class="number">-1</span>;<span class="comment">// 前任变成单身状态 </span></span><br><span class="line">i = <span class="number">-1</span>;<span class="comment">// 重新循环 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;<span class="comment">// 输入男女个数 </span></span><br><span class="line"><span class="keyword">int</span> **ManArray = <span class="keyword">new</span> <span class="keyword">int</span> *[num];</span><br><span class="line"><span class="keyword">int</span> **WomanArray = <span class="keyword">new</span> <span class="keyword">int</span> *[num];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line">ManArray [i] = <span class="keyword">new</span> <span class="keyword">int</span>[num]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line">WomanArray [i] = <span class="keyword">new</span> <span class="keyword">int</span>[num]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)<span class="comment">// 赋初值 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ManArray [i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)  <span class="comment">// 赋初值 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; WomanArray [i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *out = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line">out [i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Gale_Shapley (out, ManArray, WomanArray);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out [i] &lt;&lt; <span class="string">""</span>;<span class="comment">// 输出男生 1~n 各自的配偶序号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cherryls0424.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cherryls0424.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治算法求最邻近点对问题</title>
    <link href="https://cherryls0424.com/2020/04/14/Closet-Point/"/>
    <id>https://cherryls0424.com/2020/04/14/Closet-Point/</id>
    <published>2020-04-14T08:51:51.000Z</published>
    <updated>2020-04-14T10:30:23.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h3> 首先声明图源自网络 (侵删)。</h3><p>要求用分治算法（O (nlogn) 复杂度）实现寻找 n 个点中最邻近点对，输出最近距离的平方。<br>数据输入:<br>第一行表示点的数目 n；<br>接下来的 n 行中，每一行依次表示点的 x 坐标，y 坐标。<br>结果输出:<br>输出 n 个点中最邻近点对距离的平方 (小数点后两位) 输入示例：<br>8<br>1 1<br>2 2<br>4 4<br>8 8<br>2 2.8<br>5 6<br>7 9<br>11 11 输出示例： 0.64 </p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><p>如果我们暴力求解的话。对于第一个点会与其他 n-1 个点比较，第二个点会与其他 n-2 个点比较，第 n-1 个点会与 1 个点比较。因此复杂度为 1+2+・・・+n-1=O (n^2)。</p><h2 id="分治法求解"><a href="#分治法求解" class="headerlink" title="分治法求解"></a>分治法求解</h2><p>分治法的思路是首先将输入的 n 个点分别按照 x 坐标升序排序存到 Point X 中，y 坐标升序排序存到 Point Y 中。值得一提的是这里我用的是 STL 库函数中的 sort 函数，而我查阅了相关资料库函数中的 sort 函数采用的是快速排序 (数据量小时用的是插入排序，数据量大时用的是堆排序)。那么有的同学可能会问，既然数据量小的时候用的是插入排序，复杂度怎么会是 O (nlogn) 呢？那这里我们就要考虑实际问题了，分治算法的应用场景是数据量大时，因此采用的是堆排序，即 O (nlogn)。<br>之后选取 x=m 来作为分割直线。其中 m 为点集 S 中各点 x 坐标的中位数即 X [length/2]。由此将 S 分割为两部分 S1 和 S2。递归地在 S1 和 S2 上解最接近点对问题，我们分别得到 S1 和 S2 中的最小距离 d1 和 d2。现设 d=min (d1,d2)，但是这时的 d 并不是所求的最临近点对距离，因为可能在分界线左右长度为 d 的范围内可能存在一左一右的点距离小于 d。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/14/JSt4v8.png"  alt><br>对于 P1 中任意一点 p, 若他与 P2 中的点 q 有 distance (p,q) 小于 d。那么满足这个条件的 P2 中的点有多少个呢？我们容易看出这样的点一定落在一个 d×2d 的矩形 R 中，如下图所示:<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/14/JSNeKO.png"  alt><br>我们将右半部分即 P2 分成六等份，如下图所示。易得每一个空格里至多有一个点。倘若一个空格里存在了两个点，那么这两点间的距离最大为 (d/2)^2+(2d/3)^2=(25d^2)/36 小于 d，那么 d 就不再是最短的距离了，因此六个空格最多存在六个点。理所应当，对于中间区域的任何一点，最多与上下总共 6 个点比较即可 (按 y 坐标升序排序)<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/14/JSaruT.png"  alt></p><h2 id="分治法的时间复杂度分析"><a href="#分治法的时间复杂度分析" class="headerlink" title="分治法的时间复杂度分析"></a>分治法的时间复杂度分析</h2><p>首先我们初始时进行了两次排序复杂度为 O (nlogn)+O (nlogn)，之后在分治算法递归过程中每次将工作 n 分为左右两部分，左右两部分工作量为 n/2，合并时由于每个点只需要比较六个点，因此合并时候的复杂度为 O (n)，即有 T (n)=2T (n/2)+O (n)=&gt;T (n)=O (nlogn)。因此总的时间复杂度就为 O (nlogn)。</p><h1 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span>   // 定义坐标点类 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="keyword">float</span> y;</span><br><span class="line"><span class="built_in">point</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">point</span>(<span class="keyword">float</span> x, <span class="keyword">float</span> y) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;x = x;</span><br><span class="line"><span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">point</span>*X, *Y;     <span class="comment">// 设置全局变量点集 X (Y) 用于存放按 x (y) 坐标排序的点 </span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">// 用户输入数据的组数 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compx</span><span class="params">(<span class="built_in">point</span> a,<span class="built_in">point</span> b)</span>  <span class="comment">// 比大小函数 STL 库中 sort 函数有 3 个参数 (start,end,compare 函数名)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compy</span><span class="params">(<span class="built_in">point</span> a,<span class="built_in">point</span> b)</span>  <span class="comment">// 同上 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">distance</span><span class="params">(<span class="built_in">point</span> a, <span class="built_in">point</span> b)</span>  <span class="comment">// 返回两点间距离函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">find_distance_min</span><span class="params">(<span class="keyword">int</span> <span class="built_in">begin</span>,<span class="keyword">int</span> <span class="built_in">end</span>)</span> <span class="comment">// 分治算法具体实现 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = <span class="built_in">end</span> - <span class="built_in">begin</span> + <span class="number">1</span>;           <span class="comment">// 记录用户输入的 n 值 </span></span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">1</span>) &#123; <span class="keyword">return</span> INFINITY; &#125;    <span class="comment">// 如果只有一个点，则距离为无穷 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (length == <span class="number">2</span>) &#123; <span class="keyword">return</span> distance (X [<span class="built_in">begin</span>], X [<span class="built_in">end</span>]); &#125; <span class="comment">// 如果只有两个点，则为这两点距离 </span></span><br><span class="line"><span class="keyword">else</span> &#123;       <span class="comment">// 如果有三个点以上，就使用分治策略 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">point</span>&gt;S;   <span class="comment">// 存放中间区域 2d 之间的点 </span></span><br><span class="line"><span class="keyword">float</span> min_left = find_distance_min (<span class="built_in">begin</span>, <span class="built_in">begin</span> + length/ <span class="number">2</span> - <span class="number">1</span>); <span class="comment">// 递归左部分最近距离 </span></span><br><span class="line"><span class="keyword">float</span> min_right = find_distance_min (<span class="built_in">begin</span> + length / <span class="number">2</span>, <span class="built_in">end</span>);  <span class="comment">// 递归右部分最近距离 </span></span><br><span class="line"><span class="keyword">float</span> min_side = min_left &lt; min_right ? min_left : min_right;  <span class="comment">// 记录左右部分最近距离 </span></span><br><span class="line"><span class="keyword">float</span> mid_x = X [length / <span class="number">2</span>].x;    <span class="comment">// 中位数用于寻找在中间区域 2d 之间的点 </span></span><br><span class="line"><span class="keyword">float</span> <span class="built_in">min</span> = min_side;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(Y [i].x - mid_x) &lt; min_side) S.push_back (Y [i]); <span class="comment">// 在中间区域 2d 之间的点加入 S</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>();i++)   <span class="comment">// 遍历 S 其中的点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;S.<span class="built_in">size</span>()&amp;&amp; (S [j].y - S [i].y) &lt; min_side; j++)<span class="comment">// 只比较那些按 y 坐标排序距离小于 d 的点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">min</span> = <span class="built_in">min</span> &gt; distance (S [i], S [j]) ? distance (S [i], S [j]) : <span class="built_in">min</span>; <span class="comment">// 更新 min 值 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">X = <span class="keyword">new</span> <span class="built_in">point</span>[n];</span><br><span class="line">Y= <span class="keyword">new</span> <span class="built_in">point</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 用户输入 </span></span><br><span class="line"><span class="keyword">float</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a&gt;&gt;b;</span><br><span class="line"><span class="function"><span class="built_in">point</span> <span class="title">z</span><span class="params">(a, b)</span></span>;</span><br><span class="line">X [i] = Y [i] = z;</span><br><span class="line">&#125;</span><br><span class="line">sort (X, X + n, compx); <span class="comment">// 按 x 坐标排序 </span></span><br><span class="line">sort (Y, Y + n, compy); <span class="comment">// 按 y 坐标排序 </span></span><br><span class="line"><span class="keyword">float</span> <span class="built_in">min</span> = find_distance_min (<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">min</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感谢观看"><a href="#感谢观看" class="headerlink" title="感谢观看"></a>感谢观看</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cherryls0424.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cherryls0424.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 搭建个人博客</title>
    <link href="https://cherryls0424.com/2020/04/11/hexo-Github/hexo-Github/"/>
    <id>https://cherryls0424.com/2020/04/11/hexo-Github/hexo-Github/</id>
    <published>2020-04-11T09:44:05.000Z</published>
    <updated>2020-04-14T08:52:54.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Introduction——-前言"><a href="#Introduction——-前言" class="headerlink" title="Introduction—— 前言"></a>Introduction—— 前言</h1><p>&#8195; &#8195; 最初我建博客的想法来源于参观了同学的博客 (不过那时也只是停留在想法)，真正让我开始着手的是因为数据库的一次作业 ———— 了解<br><label style="color:orange">wordpress</label>，建立一个前端页面。期间我尝试了用腾讯云 + wordpress 的方法建立博客 (先是买了域名 [100 多元好心疼]，之后在腾讯买了云服务器 [“校园 + 活动” 学生购买云服务器 10 元 per 月]，之后备案域名等等等等，前前后后花了十多天，最终也配置完成了。但是我觉得我可能无力去运维一个网站，而且我也暂时无法负担域名和服务器的花费)，最终未果。最后我回到了<br><label style="color:orange">Hexo+Github</label> 的方法，在一天之内搭建了这个博客，并且配置了主题，最终的效果也还算满意。<br>&#8195; &#8195; 因此我将自己搭建的过程记录下来，供想搭建博客的人浏览。这篇文章不需要很好的编程基础，适合小白 (我还在不断学习)。</p><h1 id="Preparation——-准备"><a href="#Preparation——-准备" class="headerlink" title="Preparation—— 准备"></a>Preparation—— 准备</h1><p>①环境：<label style="color:orange">windows 系统 </label><br>②需要安装：<label style="color:orange">(node.js)  (git)  (hexo)</label><br>③需要注册：<label style="color:orange">Github 帐号 </label></p><h1 id="创建-GitHub-帐号"><a href="#创建-GitHub-帐号" class="headerlink" title="创建 GitHub 帐号"></a>创建 GitHub 帐号</h1><h3 id="浏览器地址栏输入-https-github-com"><a href="#浏览器地址栏输入-https-github-com" class="headerlink" title="浏览器地址栏输入 https://github.com/"></a>浏览器地址栏输入 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></h3><p>①因为 Github 一直处于一种半被墙的状态，有些同学可能打开速度较慢。我们可以进行如下操作<br>&#8195;  &#8195; 找到 C 盘目录下的 C:\Windows\System32\drivers\etc 里的 hosts 文件 (用记事本打开就可以) 在此文档末尾加上<br>           &#8195;  &#8195;<label style="color:orange">140.82.113.3 github.com<br>           &#8195;  &#8195;199.232.5.194 github.global.ssl.fastly.net</label> 这两行代码即可<br>②注册 Github 帐号<br>username 请谨慎注册，因为我们注册的域名即为 “username.github.io”，因此挑选一个自己喜欢的名字。注册的邮箱会有一个验证注册的邮件，注意查收 (点击邮件中的 verify your Email 即可)。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/11/Gbq1c4.png"  alt></p><h3 id="创建一个-Github-工程。"><a href="#创建一个-Github-工程。" class="headerlink" title="创建一个 Github 工程。"></a>创建一个 Github 工程。</h3><p><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/11/GbXAje.png"  alt><br>注意点来了，务必保持 Repository name 格式为前面注册的 usrname 加 github.io (例如我的是 test-hexo.github.io), 勾选上 Initialize this repository with…… 点击 create。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/11/GbjmMF.png"  alt></p><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p>因为 Git 官网是外网下载速度较慢，这里是我下载好的 Git 百度网盘链接 <a href="https://pan.baidu.com/s/1R_pemFDsoExQ3IbcEIK6Xw" target="_blank" rel="noopener">https://pan.baidu.com/s/1R_pemFDsoExQ3IbcEIK6Xw</a> ；提取码：z0xd<br><label style="color:orange"> 在安装过程中都是默认配置。除了以下这一页要勾选下图的选项 </label><br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/11/GbzPVH.png"  alt><br>安装完成后 win+R 键输入 cmd 打开命令行，输入 Git，回车若出现以下内容则证明 Git 安装成功。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/11/Gbzhod.png"  alt></p><h1 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h1><p>Hexo 是基于 Node.js 开发的，所以要安装 hexo，Node.js 是必不可少的<br>打开 node.js 官网 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载长期支持版本的 (即 LTS)<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLinnx.png"  alt><br>之后安装均为默认配置<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/05/GB59tx.png"  alt><br>安装完成后，跟 Git 安装后一样。win+R 键输入 cmd 打开命令行，输入 node -v，回车若出现下载的版本号则证明 node.js 安装成功。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLis3j.png"  alt></p><h1 id="Github-密钥-SSH-配置"><a href="#Github-密钥-SSH-配置" class="headerlink" title="Github 密钥 SSH 配置"></a>Github 密钥 SSH 配置</h1><p>ssh 是一个登录 github 的密钥，有了 ssh key，我们才能通过 Git 上传文件到 Github 的仓库，没有 ssh key 也可以布置博客，只不过会很麻烦，全部文件都要手动上传到 Github。</p><h2 id="打开-Git-启动-Git-bash-exe-文件"><a href="#打开-Git-启动-Git-bash-exe-文件" class="headerlink" title="打开 Git 启动 Git-bash.exe 文件"></a>打开 Git 启动 Git-bash.exe 文件</h2><p>输入 ssh-keygen -t rsa -C “<a href="mailto:xxxx@xxx.com">xxxx@xxx.com</a>“（引号里是你注册 Github 的邮箱）回车出现如下图内容<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLAfVP.png"  alt></p><h2 id="三个回车"><a href="#三个回车" class="headerlink" title="三个回车"></a>三个回车</h2><h3 id="第一次回车"><a href="#第一次回车" class="headerlink" title="第一次回车"></a>第一次回车</h3><p>这里是设置一个进入口令，我们设置为空就好，所以直接回车（这里显示了生成密钥的文件位置，记录下来，我们下面会用到）<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLA7vj.png"  alt></p><h3 id="第二次回车"><a href="#第二次回车" class="headerlink" title="第二次回车"></a>第二次回车</h3><p>这里是验证刚才的口令，因此这里也为空值，直接回车<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLEp24.png"  alt></p><h3 id="第三次回车"><a href="#第三次回车" class="headerlink" title="第三次回车"></a>第三次回车</h3><p>出现以下内容则证明 ssh 文件已经生成<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLEVIK.png"  alt></p><h2 id="在-Github-加入-ssh-密钥"><a href="#在-Github-加入-ssh-密钥" class="headerlink" title="在 Github 加入 ssh 密钥"></a>在 Github 加入 ssh 密钥</h2><p>打开你的 Github 找到右上角的 settings 如下图；然后找到 SSH and GPG keys 栏<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLE2z4.png"  alt></p><h3 id="点击-New-SSH-key"><a href="#点击-New-SSH-key" class="headerlink" title="点击 New SSH key"></a>点击 New SSH key</h3><p>这里的 title 随意取。然后打开生成密钥的文件（文件名为 id_rsa.pub，我们用记事本打开），将 key 设置为 id_rsa.pub 里的内容。如下图。密钥 SSH 配置成功<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GLZV3D.png"  alt></p><h1 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h1><h2 id="本地新建-blog-存放的文件夹"><a href="#本地新建-blog-存放的文件夹" class="headerlink" title="本地新建 blog 存放的文件夹"></a>本地新建 blog 存放的文件夹</h2><p>我这里放在了 D 盘，文件名为 blog。</p><h2 id="一键部署-hexo"><a href="#一键部署-hexo" class="headerlink" title="一键部署 hexo"></a>一键部署 hexo</h2><h3 id="打开-hexo-官网"><a href="#打开-hexo-官网" class="headerlink" title="打开 hexo 官网"></a>打开 hexo 官网</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a> 往下拉你会看到如下的一键部署命令<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GONZ4O.png"  alt></p><h3 id="通过命令行安装"><a href="#通过命令行安装" class="headerlink" title="通过命令行安装"></a>通过命令行安装</h3><ol><li>输入 D: 回车进入 D 盘 (我这里是 D:，如果新建的文件在 E 盘，F 盘，对应输入即可)，输入 cd blog 进入你博客将要存放的文件夹 (cd 后面的内容以你新建的文件夹名为准)<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GONtPS.png"  alt></li><li>依次输入 hexo 官网一键部署的五条指令<br>注：在执行五条指令之前先输入下条指令 npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> （因为用 npm 安装话经常出现卡住而导致无法正常安装，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本 (只读)，同步频率目前为 10 分钟 一次以保证尽量与官方服务同步。。）<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GONoa6.png"  alt></li><li>最后一条指令 hexo server 是调试指令，执行过后我们在浏览器地址栏输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> / 即可看到如下界面（这是 hexo 默认的主题），这时 hexo 已经可以在本地进行访问了<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GONTIK.png"  alt><br>命令行先不要关闭，一会儿还要用到。命令行先不要关闭，一会儿还要用到。命令行先不要关闭，一会儿还要用到。<h1 id="安装-sublime"><a href="#安装-sublime" class="headerlink" title="安装 sublime"></a>安装 sublime</h1>hexo 是静态博客，因此每次博客的更新都需要在本地更新博客文件，再通过 hexo 指令生成静态页面，最终发布到网站上。我在这里推荐大家使用 sublime 编辑器 (轻量级而且方便编辑)。因为 sublime 的下载较慢，我把下载好的分享在百度网盘，供大家使用。<a href="https://pan.baidu.com/s/1TDhPExgzTrZNsZBbtetAnw" target="_blank" rel="noopener">https://pan.baidu.com/s/1TDhPExgzTrZNsZBbtetAnw</a> 提取码：t17h<br>#hexo 发布至 github<br>打开 sublime，并将 blog 文件直接拖到 sublime 中<h2 id="命令行运行-npm-install-hexo-deployer-git-–save"><a href="#命令行运行-npm-install-hexo-deployer-git-–save" class="headerlink" title="命令行运行 npm install hexo-deployer-git –save"></a>命令行运行 npm install hexo-deployer-git –save</h2><h2 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置_config.yml 文件"></a>配置_config.yml 文件</h2></li><li>找到 url 属性：设置为你网站的网址即 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> (username 为你 github 的用户名)</li><li>找到 type 属性：设置为 git</li><li>在 type 下方添加 branch 属性：设置为 master</li><li>在 type 下方添加 repo 属性：设置为你仓库的地址 (可以在下图的地方找到)   注：配置完这些后不要忘记 CTRL+S 保存噢！<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GOUPJS.png"  alt><h2 id="命令行运行-hexo-g"><a href="#命令行运行-hexo-g" class="headerlink" title="命令行运行 hexo g"></a>命令行运行 hexo g</h2>用于生成静态网页<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GOUVLn.png"  alt><h2 id="命令行运行-hexo-d"><a href="#命令行运行-hexo-d" class="headerlink" title="命令行运行 hexo d"></a>命令行运行 hexo d</h2>部署到网页 (这里需要配置最后一步，即 github 的账号信息)<br>输入 github 用户名和密码<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GOUmd0.png"  alt><br>到此我们就成功将 hexo 部署到 Github 了。也就成功搭建了个人博客。<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/04/12/GOUnoV.png"  alt><h1 id="为你的博客挑选主题"><a href="#为你的博客挑选主题" class="headerlink" title="为你的博客挑选主题"></a>为你的博客挑选主题</h1>这里我推荐了几个提供主题的网址<br>推荐网站 1：<a href="https://blog.csdn.net/zgd826237710/article/details/99671027" target="_blank" rel="noopener">https://blog.csdn.net/zgd826237710/article/details/99671027</a><br>推荐网站 2：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://cherryls0424.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://cherryls0424.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cherryls0424.com/2020/04/09/hello-world/"/>
    <id>https://cherryls0424.com/2020/04/09/hello-world/</id>
    <published>2020-04-09T07:30:21.391Z</published>
    <updated>2020-04-11T09:22:47.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="这是我的第一篇文章。真的很高兴我能有记录生活的想法。今后我会在此分享我的生活以及学习心得！"><a href="#这是我的第一篇文章。真的很高兴我能有记录生活的想法。今后我会在此分享我的生活以及学习心得！" class="headerlink" title="这是我的第一篇文章。真的很高兴我能有记录生活的想法。今后我会在此分享我的生活以及学习心得！"></a>这是我的第一篇文章。真的很高兴我能有记录生活的想法。今后我会在此分享我的生活以及学习心得！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://cherryls0424.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://cherryls0424.com/tags/hexo/"/>
    
  </entry>
  
</feed>
